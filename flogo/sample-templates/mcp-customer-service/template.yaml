apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: flogo-template-mcp-customer-service
  title: Flogo MCP Customer Service
  description: Create AI-powered customer service application using Model Context Protocol (MCP) integration with TIBCO Flogo
  tags:
    - tibco
    - flogo
    - mcp
    - ai
    - model-context-protocol
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  owner: ACME
  type: library
  parameters:
    - title: Fill in some steps
      required:
        - name
        - description
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the Flogo MCP Customer Service Project
          ui:field: EntityNamePicker
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: A description for the Flogo MCP Customer Service Project
        system:
          title: System
          type: string
          description: Target System 
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: system
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: fetch
      name: Flogo MCP Customer Service Skeleton
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          mcpServerUrl: ${{ parameters.mcpServerUrl }}
          aiModelProvider: ${{ parameters.aiModelProvider }}
          enableLogs: ${{ parameters.enableLogs }}
          maxTokens: ${{ parameters.maxTokens }}
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts:
          - github.com
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}