apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: flogo-trigger-postgreslistener
  title: PostgreSQL Listener Trigger
  description: Real-time PostgreSQL NOTIFY/LISTEN event monitoring with SSL/TLS support, multi-channel listening, and comprehensive connection management
  tags:
    - flogo
    - trigger
    - postgresql
    - notify-listen
    - real-time
    - event-driven
    - database
    - ssl-tls
    - monitoring
spec:
  owner: flogo-team
  type: flogo-trigger
  parameters:
    - title: Trigger Information
      required:
        - trigger_name
        - namespace
      properties:
        trigger_name:
          title: Trigger Name
          type: string
          description: Name for your PostgreSQL Listener trigger instance
          pattern: '^[a-zA-Z][a-zA-Z0-9_-]*$'
          default: postgreslistener
        namespace:
          title: Namespace
          type: string
          description: Namespace for the trigger (e.g., com.company.project)
          pattern: '^[a-zA-Z][a-zA-Z0-9_.]*$'
          default: com.example

    - title: Database Connection
      required:
        - postgres_host
        - postgres_port
        - postgres_user
        - postgres_password
        - database_name
      properties:
        postgres_host:
          title: PostgreSQL Host
          type: string
          description: PostgreSQL server hostname or IP address
          default: localhost
        postgres_port:
          title: PostgreSQL Port
          type: integer
          description: PostgreSQL server port
          minimum: 1
          maximum: 65535
          default: 5432
        postgres_user:
          title: PostgreSQL User
          type: string
          description: Database user with LISTEN privileges
          default: postgres
        postgres_password:
          title: PostgreSQL Password
          type: string
          description: Database user password
          ui:widget: password
        database_name:
          title: Database Name
          type: string
          description: Target database name to connect to
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'

    - title: SSL/TLS Configuration
      properties:
        ssl_mode:
          title: SSL Mode
          type: string
          description: SSL/TLS connection mode
          enum:
            - disable
            - require
            - verify-ca
            - verify-full
          enumNames:
            - Disable (No SSL)
            - Require (SSL Required)
            - Verify CA (Verify Certificate Authority)
            - Verify Full (Full Certificate Validation)
          default: disable
        enable_tls_config:
          title: Enable Advanced TLS Configuration
          type: boolean
          description: Enable advanced TLS certificate configuration
          default: false
        tls_mode:
          title: TLS Verification Mode
          type: string
          description: TLS certificate verification mode
          enum:
            - VerifyCA
            - VerifyFull
          enumNames:
            - Verify CA (Certificate Authority only)
            - Verify Full (CA and hostname)
          default: VerifyCA
        ca_certificate:
          title: CA Certificate
          type: string
          description: CA certificate content (base64 encoded)
          ui:widget: textarea
          default: ""
        client_certificate:
          title: Client Certificate
          type: string
          description: Client certificate content (base64 encoded)
          ui:widget: textarea
          default: ""
        client_key:
          title: Client Private Key
          type: string
          description: Client private key content (base64 encoded)
          ui:widget: textarea
          default: ""

    - title: Connection Management
      properties:
        connection_timeout:
          title: Connection Timeout (seconds)
          type: integer
          description: Database connection timeout in seconds
          minimum: 1
          maximum: 300
          default: 30
        max_retry_attempts:
          title: Max Connection Retry Attempts
          type: integer
          description: Maximum connection retry attempts
          minimum: 0
          maximum: 10
          default: 3
        retry_delay:
          title: Connection Retry Delay (seconds)
          type: integer
          description: Delay between connection retry attempts in seconds
          minimum: 1
          maximum: 60
          default: 5

    - title: Monitoring Features
      properties:
        enable_health_monitoring:
          title: Enable Health Monitoring
          type: boolean
          description: Periodic connection health checks with metrics
          default: true
        enable_opentelemetry:
          title: Enable OpenTelemetry Integration
          type: boolean
          description: Distributed tracing with PostgreSQL-specific metadata
          default: false
        enable_enhanced_logging:
          title: Enable Enhanced Logging
          type: boolean
          description: Detailed logging with correlation IDs and structured output
          default: true
        enable_memory_tracking:
          title: Enable Memory Tracking
          type: boolean
          description: Runtime memory usage monitoring and statistics
          default: false

    - title: Channel Configuration
      properties:
        default_channels:
          title: Default Channels to Listen
          type: string
          description: Comma-separated list of PostgreSQL channels to monitor
          default: "notifications"
        enable_multi_channel:
          title: Enable Multi-Channel Support
          type: boolean
          description: Support listening on multiple channels simultaneously
          default: true
        channel_prefix:
          title: Channel Name Prefix
          type: string
          description: Prefix for all channel names (optional)
          default: ""

    - title: Repository Information
      required:
        - repo_name
      properties:
        repo_name:
          title: Repository Name
          type: string
          description: Name of the repository to create
          pattern: '^[a-zA-Z][a-zA-Z0-9_-]*$'
        description:
          title: Description
          type: string
          description: A brief description of your PostgreSQL Listener trigger
          default: PostgreSQL Listener trigger for real-time NOTIFY/LISTEN event monitoring

  steps:
    - id: fetch-base
      name: Fetch Base Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          trigger_name: ${{ parameters.trigger_name }}
          namespace: ${{ parameters.namespace }}
          postgres_host: ${{ parameters.postgres_host }}
          postgres_port: ${{ parameters.postgres_port }}
          postgres_user: ${{ parameters.postgres_user }}
          postgres_password: ${{ parameters.postgres_password }}
          database_name: ${{ parameters.database_name }}
          ssl_mode: ${{ parameters.ssl_mode }}
          enable_tls_config: ${{ parameters.enable_tls_config }}
          tls_mode: ${{ parameters.tls_mode }}
          ca_certificate: ${{ parameters.ca_certificate }}
          client_certificate: ${{ parameters.client_certificate }}
          client_key: ${{ parameters.client_key }}
          connection_timeout: ${{ parameters.connection_timeout }}
          max_retry_attempts: ${{ parameters.max_retry_attempts }}
          retry_delay: ${{ parameters.retry_delay }}
          enable_health_monitoring: ${{ parameters.enable_health_monitoring }}
          enable_opentelemetry: ${{ parameters.enable_opentelemetry }}
          enable_enhanced_logging: ${{ parameters.enable_enhanced_logging }}
          enable_memory_tracking: ${{ parameters.enable_memory_tracking }}
          default_channels: ${{ parameters.default_channels }}
          enable_multi_channel: ${{ parameters.enable_multi_channel }}
          channel_prefix: ${{ parameters.channel_prefix }}
          repo_name: ${{ parameters.repo_name }}
          description: ${{ parameters.description }}

    - id: publish
      name: Publish to Repository
      action: publish:github
      input:
        repoUrl: github.com?repo=${{ parameters.repo_name }}
        description: ${{ parameters.description }}
        defaultBranch: main
        gitCommitMessage: 'Initial commit: PostgreSQL Listener Trigger'

    - id: register
      name: Register in Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in Catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}