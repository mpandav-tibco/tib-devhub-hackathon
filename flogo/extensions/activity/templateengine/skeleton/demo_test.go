package templateengine

import (
	"strings"
	"testing"
	"text/template"
)

// Demo test showcasing all enhanced template engine features
func TestComprehensiveTemplateEngineDemo(t *testing.T) {
	activity := &Activity{}
	funcMap := activity.getTemplateFunctions()

	// Enhanced comprehensive template with all features
	templateContent := `
# CUSTOMER ANALYTICS Report

**Generated**: {{formatDate "2006-01-02 15:04:05" now}}
**Customer**: {{title .customerName}}
**Type**: {{default "Standard" .customerType}}

## Summary Statistics
- Total Orders: {{.totalOrders}}
- Total Value: ${{.totalValue}}
- Average Order: ${{divide .totalValue .totalOrders}}

## Customer Details

{{if ge .age 18}}‚úÖ **Verified Adult Customer**{{else}}‚ö†Ô∏è **Minor Customer**{{end}}

### Contact Information

1. EMAIL: {{upper .email}}

2. PHONE: {{.phone}}

## Order History

Total Orders: {{length .orderHistory}}

Recent Orders:

{{range .orderHistory}}
- Order #{{.id}}: {{truncate 30 .description}} ({{.status}})

{{end}}

First Order: {{first .orderHistory}}
Last Order: {{last .orderHistory}}

## Data Analysis

Raw Analytics: {{json .analytics}}

### Performance Metrics

{{range $key, $value := .analytics}}
- {{title $key}}: {{$value}}

{{end}}

## String Operations Demo
Original: "{{.demoString}}"
- Uppercase: {{upper .demoString}}
- Lowercase: {{lower .demoString}}
- Reversed: {{reverse .demoString}}
- Capitalized: {{capitalize .demoString}}

## Mathematical Calculations
Base Price: ${{.basePrice}}
Tax Amount: ${{divide (multiply .basePrice .taxRate) 100}}
Total: ${{add .basePrice (divide (multiply .basePrice .taxRate) 100)}}

Bulk Discount Check:

{{if gt .quantity 10}}üéâ Eligible for {{.discountPercent}}% bulk discount!
Discount: ${{divide (multiply .totalValue .discountPercent) 100}}{{else}}üí° Order more than 10 items for bulk discount{{end}}

## Conditional Logic

{{if eq .customerType "premium"}}üíé **Premium Customer Benefits:**
- Free shipping on all orders
- 24/7 priority support
- Exclusive member pricing{{else}}üì¶ **Standard Customer Benefits:**
- Free shipping on orders over $50
- Business hours support{{end}}

## Array Processing
Tags: {{join .tags ", "}}
Tag Count: {{length .tags}}

{{if contains (join .tags ",") "vip"}}üåü VIP tag detected - special handling required{{end}}

---
Report generated by TIBCO Flogo Template Engine
Processing time: {{.processingTime}}ms
Template version: {{.templateVersion}}`

	// Create test data with various data types
	data := map[string]interface{}{
		"customerName":    "john doe",
		"customerType":    "premium",
		"age":             25,
		"email":           "john@example.com",
		"phone":           "+1-555-0123",
		"totalOrders":     15,
		"totalValue":      1375,
		"quantity":        25,
		"basePrice":       99,
		"taxRate":         8,
		"discountPercent": 15,
		"processingTime":  45,
		"templateVersion": "2.0.0",
		"demoString":      "hello world",
		"orderHistory": []map[string]interface{}{
			{"id": "ORD001", "description": "Premium software license and extended support package", "status": "completed"},
			{"id": "ORD002", "description": "Professional consulting services for system integration", "status": "in-progress"},
			{"id": "ORD003", "description": "Custom integration development", "status": "pending"},
		},
		"analytics": map[string]interface{}{
			"engagement_level":   "high",
			"retention_rate":     0.92,
			"satisfaction_score": 4.8,
		},
		"tags": []string{"enterprise", "vip", "automation", "integration"},
	}

	// Execute template
	tmpl, err := template.New("comprehensive_demo").Funcs(funcMap).Parse(templateContent)
	if err != nil {
		t.Fatalf("Template parsing failed: %v", err)
	}

	var output strings.Builder
	err = tmpl.Execute(&output, data)
	if err != nil {
		t.Fatalf("Template execution failed: %v", err)
	}

	// Validate that various features are working
	outputStr := output.String()
	testCases := []struct {
		description string
		expected    string
	}{
		{"Date formatting", "2025-08-04"},
		{"String functions", "John Doe"},
		{"Math operations", "Total: $106"},
		{"Conditional logic", "Premium Customer Benefits"},
		{"String operations", "HELLO WORLD"},
		{"Array operations", "enterprise, vip, automation, integration"},
		{"JSON conversion", `"satisfaction_score":4.8`},
		{"Template functions", "VIP tag detected"},
	}

	for _, tc := range testCases {
		if !strings.Contains(outputStr, tc.expected) {
			t.Errorf("%s: Expected '%s' in output", tc.description, tc.expected)
		}
	}

	// Print the full output for visual inspection
	t.Logf("Full template output:\n%s", outputStr)
}
