apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: flogo-activity-xmlfilter
  title: XML Filter Activity
  description: Filter XML content using multiple XPath expressions with configurable AND/OR logic for intelligent content routing and validation
  tags:
    - flogo
    - activity
    - xml
    - xpath
    - filtering
    - content-routing
    - data-validation
    - integration
spec:
  owner: flogo-team
  type: flogo-activity
  parameters:
    - title: Activity Information
      required:
        - activity_name
        - namespace
      properties:
        activity_name:
          title: Activity Name
          type: string
          description: Name for your XML Filter activity instance
          pattern: '^[a-zA-Z][a-zA-Z0-9_-]*$'
          default: xmlfilter
        namespace:
          title: Namespace
          type: string
          description: Namespace for the activity (e.g., com.company.project)
          pattern: '^[a-zA-Z][a-zA-Z0-9_.]*$'
          default: com.example

    - title: Filter Configuration
      properties:
        default_condition_logic:
          title: Default Condition Logic
          type: string
          description: Default logic for combining multiple XPath conditions
          enum:
            - AND
            - OR
          enumNames:
            - AND (All conditions must match)
            - OR (Any condition can match)
          default: AND
        enable_short_circuit:
          title: Enable Short-Circuit Evaluation
          type: boolean
          description: Stop evaluation at first failure (AND) or success (OR)
          default: true
        strict_xpath_validation:
          title: Strict XPath Validation
          type: boolean
          description: Fail on invalid XPath expressions instead of treating as false
          default: false

    - title: Performance Options
      properties:
        xpath_optimization:
          title: XPath Expression Optimization
          type: boolean
          description: Enable XPath expression optimization for better performance
          default: true
        xml_parsing_mode:
          title: XML Parsing Mode
          type: string
          description: XML parsing mode for different document sizes
          enum:
            - standard
            - streaming
            - memory-efficient
          enumNames:
            - Standard (Best for most use cases)
            - Streaming (Large documents)
            - Memory Efficient (Resource constrained)
          default: standard
        enable_namespace_support:
          title: Enable Namespace Support
          type: boolean
          description: Enable XML namespace processing in XPath expressions
          default: true

    - title: Error Handling
      properties:
        error_handling_mode:
          title: Error Handling Mode
          type: string
          description: How to handle XML parsing and XPath evaluation errors
          enum:
            - strict
            - lenient
            - ignore
          enumNames:
            - Strict (Fail on any error)
            - Lenient (Log errors, continue processing)
            - Ignore (Silent error handling)
          default: lenient
        enable_detailed_logging:
          title: Enable Detailed Logging
          type: boolean
          description: Enable detailed logging for debugging and monitoring
          default: false
        validate_xml_structure:
          title: Validate XML Structure
          type: boolean
          description: Validate XML structure before XPath evaluation
          default: true

    - title: Advanced Features
      properties:
        include_examples:
          title: Include Example XPath Patterns
          type: boolean
          description: Include common XPath pattern examples and templates
          default: true
        enable_condition_caching:
          title: Enable Condition Caching
          type: boolean
          description: Cache compiled XPath expressions for better performance
          default: true
        support_complex_predicates:
          title: Support Complex Predicates
          type: boolean
          description: Enable support for complex XPath predicates and functions
          default: true

    - title: Repository Information
      required:
        - repo_name
      properties:
        repo_name:
          title: Repository Name
          type: string
          description: Name of the repository to create
          pattern: '^[a-zA-Z][a-zA-Z0-9_-]*$'
        description:
          title: Description
          type: string
          description: A brief description of your XML Filter activity
          default: XML filtering activity for content routing and validation using XPath expressions

  steps:
    - id: fetch-base
      name: Fetch Base Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          activity_name: ${{ parameters.activity_name }}
          namespace: ${{ parameters.namespace }}
          default_condition_logic: ${{ parameters.default_condition_logic }}
          enable_short_circuit: ${{ parameters.enable_short_circuit }}
          strict_xpath_validation: ${{ parameters.strict_xpath_validation }}
          xpath_optimization: ${{ parameters.xpath_optimization }}
          xml_parsing_mode: ${{ parameters.xml_parsing_mode }}
          enable_namespace_support: ${{ parameters.enable_namespace_support }}
          error_handling_mode: ${{ parameters.error_handling_mode }}
          enable_detailed_logging: ${{ parameters.enable_detailed_logging }}
          validate_xml_structure: ${{ parameters.validate_xml_structure }}
          include_examples: ${{ parameters.include_examples }}
          enable_condition_caching: ${{ parameters.enable_condition_caching }}
          support_complex_predicates: ${{ parameters.support_complex_predicates }}
          repo_name: ${{ parameters.repo_name }}
          description: ${{ parameters.description }}

    - id: publish
      name: Publish to Repository
      action: publish:github
      input:
        repoUrl: github.com?repo=${{ parameters.repo_name }}
        description: ${{ parameters.description }}
        defaultBranch: main
        gitCommitMessage: 'Initial commit: XML Filter Activity'

    - id: register
      name: Register in Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in Catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}